Voici la procédure complète d'installation avec SQLite :
1. Prérequis
Installez Node.js (incluant npm) : https://nodejs.org (version LTS)
SQLite est inclus automatiquement avec Node.js - aucune installation supplémentaire !
2. Créer la structure du projet
Voici la procédure complète d'installation avec SQLite :

bashmkdir locker-management
cd locker-management

3. Créer les fichiers
A. Fichier package.json
Créez un fichier package.json à la racine avec ce contenu :

{
  "name": "locker-management-app",
  "version": "1.0.0",
  "description": "Application de gestion des casiers avec SQLite",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "sqlite3": "^5.1.6",
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}

B. Fichier server.js
Créez un fichier server.js avec le contenu du backend (voir l'artifact "server.js - Backend Node.js avec Express et SQLite")
C. Fichier .env
Créez un fichier .env avec ce contenu :

PORT=5000
NODE_ENV=development

D. Fichier public/index.html
Créez un dossier public et dedans un fichier index.html avec le contenu du frontend (voir l'artifact "Gestion des Casiers")
4. Installer les dépendances

bash
npm install

5. Lancer le serveur
Mode développement (avec rechargement automatique) :
npm run dev

Mode production :
npm start

Vous devriez voir dans le terminal :
✓ SQLite connecté
✓ Casiers initialisés: 190
✓ Serveur démarré sur http://localhost:5000
✓ Base de données: /chemin/vers/app.db

6. Accéder à l'application
Ouvrez votre navigateur à : http://localhost:5000
Structure finale du dossier

locker-management/
├── server.js              ← Backend
├── package.json           ← Dépendances
├── .env                   ← Configuration
├── app.db                 ← Base de données (créée automatiquement)
├── public/
│   └── index.html         ← Frontend
└── node_modules/          ← Créé automatiquement

7. Commandes utiles

# Arrêter le serveur
Ctrl + C

# Redémarrer le serveur
npm run dev

# Voir les fichiers du projet
ls -la                    # Mac/Linux
dir                       # Windows

# Accéder à la base de données
# Le fichier app.db contient toutes les données

Troubleshooting

❌ "command not found: npm"

    Réinstallez Node.js depuis https://nodejs.org

❌ "Port 5000 already in use"

    Changez le port dans .env : PORT=3000
    Relancez : npm run dev

❌ "Cannot find module 'express'"

    Lancez : npm install

❌ "CORS error" dans le navigateur

    C'est normal si vous accédez depuis file://
    Utilisez http://localhost:5000 au lieu d'ouvrir directement le HTML

❌ Les données ne se sauvegardent pas

    Vérifiez que le serveur est bien lancé
    Regardez les messages d'erreur dans le terminal

8. Sauvegarder/Partager

La base de données est dans le fichier app.db :

    ✅ Vous pouvez le copier pour faire une sauvegarde
    ✅ Vous pouvez le partager avec d'autres ordinateurs
    ✅ C'est un fichier SQLite standard, lisible par n'importe quel outil SQLite

Voilà ! L'app devrait fonctionner immédiatement 🚀



