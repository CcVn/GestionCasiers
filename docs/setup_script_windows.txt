# Script d'installation automatique - Application Casiers (Windows)
# Usage: powershell -ExecutionPolicy Bypass -File setup.ps1

Write-Host "==================================" -ForegroundColor Cyan
Write-Host "üè• HADO - Gestion des Casiers" -ForegroundColor White
Write-Host "    Installation automatique" -ForegroundColor White
Write-Host "==================================" -ForegroundColor Cyan
Write-Host ""

# Fonction pour afficher les messages
function Write-Success {
    param($message)
    Write-Host "‚úì " -ForegroundColor Green -NoNewline
    Write-Host $message
}

function Write-ErrorMsg {
    param($message)
    Write-Host "‚úó " -ForegroundColor Red -NoNewline
    Write-Host $message
}

function Write-WarningMsg {
    param($message)
    Write-Host "‚ö† " -ForegroundColor Yellow -NoNewline
    Write-Host $message
}

function Write-InfoMsg {
    param($message)
    Write-Host "‚Ñπ " -ForegroundColor Blue -NoNewline
    Write-Host $message
}

# V√©rifier Node.js
Write-Host "1Ô∏è‚É£  V√©rification des pr√©requis..." -ForegroundColor Cyan
Write-Host ""

try {
    $nodeVersion = node -v
    Write-Success "Node.js install√©: $nodeVersion"
} catch {
    Write-ErrorMsg "Node.js n'est pas install√©"
    Write-Host "   T√©l√©chargez Node.js depuis: https://nodejs.org/" -ForegroundColor Yellow
    exit 1
}

try {
    $npmVersion = npm -v
    Write-Success "npm install√©: $npmVersion"
} catch {
    Write-ErrorMsg "npm n'est pas install√©"
    exit 1
}
Write-Host ""

# V√©rifier la structure
Write-Host "2Ô∏è‚É£  V√©rification de la structure du projet..." -ForegroundColor Cyan
Write-Host ""

if (-not (Test-Path "package.json")) {
    Write-ErrorMsg "package.json introuvable"
    Write-Host "   √ätes-vous dans le bon dossier ?" -ForegroundColor Yellow
    exit 1
}
Write-Success "package.json trouv√©"

if (-not (Test-Path "server.js")) {
    Write-ErrorMsg "server.js introuvable"
    exit 1
}
Write-Success "server.js trouv√©"

# Cr√©er le dossier public
if (-not (Test-Path "public")) {
    Write-WarningMsg "Dossier public/ manquant, cr√©ation..."
    New-Item -ItemType Directory -Path "public" | Out-Null
}
Write-Success "Dossier public/ v√©rifi√©"

# V√©rifier les fichiers frontend
$missingFiles = 0
$frontendFiles = @("index.html", "app.js", "styles.css")

foreach ($file in $frontendFiles) {
    if (-not (Test-Path "public\$file")) {
        Write-ErrorMsg "public\$file manquant"
        $missingFiles++
    } else {
        Write-Success "public\$file trouv√©"
    }
}

if ($missingFiles -gt 0) {
    Write-Host ""
    Write-WarningMsg "Copiez les fichiers manquants dans public\"
    $continue = Read-Host "Voulez-vous continuer quand m√™me ? (y/n)"
    if ($continue -ne "y" -and $continue -ne "Y") {
        exit 1
    }
}
Write-Host ""

# Installer les d√©pendances
Write-Host "3Ô∏è‚É£  Installation des d√©pendances npm..." -ForegroundColor Cyan
Write-Host ""

if (Test-Path "node_modules") {
    Write-InfoMsg "node_modules existe d√©j√†"
    $reinstall = Read-Host "R√©installer les d√©pendances ? (y/n)"
    if ($reinstall -eq "y" -or $reinstall -eq "Y") {
        Remove-Item -Recurse -Force "node_modules", "package-lock.json" -ErrorAction SilentlyContinue
        npm install
    } else {
        Write-Success "D√©pendances d√©j√† install√©es"
    }
} else {
    npm install
    if ($LASTEXITCODE -eq 0) {
        Write-Success "D√©pendances install√©es"
    } else {
        Write-ErrorMsg "Erreur lors de l'installation"
        exit 1
    }
}
Write-Host ""

# Cr√©er le fichier .env
Write-Host "4Ô∏è‚É£  Configuration (.env)..." -ForegroundColor Cyan
Write-Host ""

$skipEnv = $false
if (Test-Path ".env") {
    Write-WarningMsg ".env existe d√©j√†"
    $recreate = Read-Host "Voulez-vous le recr√©er ? (y/n)"
    if ($recreate -ne "y" -and $recreate -ne "Y") {
        Write-Success "Configuration existante conserv√©e"
        $skipEnv = $true
    }
}

if (-not $skipEnv) {
    Write-Host "Configuration du serveur..." -ForegroundColor White
    Write-Host ""
    
    # Port
    $port = Read-Host "Port du serveur [5000]"
    if ([string]::IsNullOrWhiteSpace($port)) { $port = "5000" }
    
    # Mot de passe admin
    Write-Host ""
    Write-WarningMsg "IMPORTANT: D√©finissez un mot de passe admin s√©curis√©"
    $adminPass = Read-Host "Mot de passe admin [admin123]" -AsSecureString
    $adminPassPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto(
        [Runtime.InteropServices.Marshal]::SecureStringToBSTR($adminPass))
    if ([string]::IsNullOrWhiteSpace($adminPassPlain)) { $adminPassPlain = "admin123" }
    
    if ($adminPassPlain -eq "admin123") {
        Write-WarningMsg "Vous utilisez le mot de passe par d√©faut (non s√©curis√©)"
    }
    
    # Anonymisation
    Write-Host ""
    $anonGuest = Read-Host "Activer l'anonymisation en mode Guest ? (y/n) [y]"
    if ([string]::IsNullOrWhiteSpace($anonGuest)) { $anonGuest = "y" }
    $anonGuest = if ($anonGuest -eq "y" -or $anonGuest -eq "Y") { "true" } else { "false" }
    
    $anonAdmin = Read-Host "Activer l'anonymisation en mode Admin ? (y/n) [n]"
    if ([string]::IsNullOrWhiteSpace($anonAdmin)) { $anonAdmin = "n" }
    $anonAdmin = if ($anonAdmin -eq "y" -or $anonAdmin -eq "Y") { "true" } else { "false" }
    
    # Mode sombre
    Write-Host ""
    Write-Host "Mode sombre:" -ForegroundColor White
    Write-Host "  1) system  - Suit les pr√©f√©rences du syst√®me"
    Write-Host "  2) active  - Toujours en mode sombre"
    Write-Host "  3) inactive - Toujours en mode clair"
    $darkChoice = Read-Host "Choix [1]"
    if ([string]::IsNullOrWhiteSpace($darkChoice)) { $darkChoice = "1" }
    
    $darkMode = switch ($darkChoice) {
        "1" { "system" }
        "2" { "active" }
        "3" { "inactive" }
        default { "system" }
    }
    
    # Backup
    Write-Host ""
    $backupFreq = Read-Host "Fr√©quence des backups automatiques (heures, 0=d√©sactiv√©) [24]"
    if ([string]::IsNullOrWhiteSpace($backupFreq)) { $backupFreq = "24" }
    
    $backupCount = Read-Host "Nombre de backups √† conserver [7]"
    if ([string]::IsNullOrWhiteSpace($backupCount)) { $backupCount = "7" }
    
    # Alerte import clients
    Write-Host ""
    $importWarning = Read-Host "Alerte si pas d'import clients depuis (jours) [4]"
    if ([string]::IsNullOrWhiteSpace($importWarning)) { $importWarning = "4" }
    
    # Cr√©er le fichier .env
    $envContent = @"
# Configuration du serveur
PORT=$port
NODE_ENV=development

# Authentification
# ‚ö†Ô∏è IMPORTANT : Changez ce mot de passe !
ADMIN_PASSWORD=$adminPassPlain

# Pseudo-anonymisation
# Active l'anonymisation en mode consultation (guest)
ANONYMIZE_GUEST=$anonGuest

# Active l'anonymisation en mode modification (admin)
ANONYMIZE_ADMIN=$anonAdmin

# Mode sombre
# Valeurs possibles: active, inactive, system
DARK_MODE=$darkMode

# Alerte import clients
# Dur√©e en jours apr√®s laquelle une alerte s'affiche si aucun import
CLIENT_IMPORT_WARNING_DAYS=$importWarning

# Backup automatique
# Fr√©quence des backups automatiques en heures (0 = d√©sactiv√©)
BACKUP_FREQUENCY_HOURS=$backupFreq

# Nombre de backups √† conserver
BACKUP_RETENTION_COUNT=$backupCount
"@

    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Success "Fichier .env cr√©√©"
}
Write-Host ""

# Cr√©er le dossier backups
Write-Host "5Ô∏è‚É£  Cr√©ation des dossiers n√©cessaires..." -ForegroundColor Cyan
Write-Host ""

if (-not (Test-Path "backups")) {
    New-Item -ItemType Directory -Path "backups" | Out-Null
    Write-Success "Dossier backups\ cr√©√©"
} else {
    Write-Success "Dossier backups\ existe"
}
Write-Host ""

# R√©sum√©
Write-Host "==================================" -ForegroundColor Green
Write-Host "‚úÖ Installation termin√©e !" -ForegroundColor Green
Write-Host "==================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìã R√©sum√© de la configuration:" -ForegroundColor White
Write-Host "   ‚Ä¢ Port: $port"
Write-Host "   ‚Ä¢ Anonymisation Guest: $anonGuest"
Write-Host "   ‚Ä¢ Anonymisation Admin: $anonAdmin"
Write-Host "   ‚Ä¢ Mode sombre: $darkMode"
Write-Host "   ‚Ä¢ Backup automatique: ${backupFreq}h"
Write-Host "   ‚Ä¢ Backups conserv√©s: $backupCount"
Write-Host ""

# Obtenir l'IP locale
$localIP = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.InterfaceAlias -notlike "*Loopback*" -and $_.IPAddress -notlike "169.254.*"} | Select-Object -First 1).IPAddress
if ([string]::IsNullOrWhiteSpace($localIP)) {
    $localIP = "[IP_LOCAL]"
}

Write-Host "üöÄ Pour d√©marrer l'application:" -ForegroundColor Cyan
Write-Host ""
Write-Host "   npm start        # Mode production"
Write-Host "   npm run dev      # Mode d√©veloppement (auto-reload)"
Write-Host ""
Write-Host "üì± Acc√®s √† l'application:" -ForegroundColor Cyan
Write-Host "   Local:  http://localhost:$port"
Write-Host "   R√©seau: http://${localIP}:$port"
Write-Host ""

# Proposer de d√©marrer
$startNow = Read-Host "Voulez-vous d√©marrer le serveur maintenant ? (y/n)"
if ($startNow -eq "y" -or $startNow -eq "Y") {
    Write-Host ""
    Write-InfoMsg "D√©marrage du serveur..."
    Write-Host ""
    npm start
} else {
    Write-Host ""
    Write-Success "Installation termin√©e. Lancez 'npm start' quand vous √™tes pr√™t."
    Write-Host ""
}